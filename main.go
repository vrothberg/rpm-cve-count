package main

import (
	"bufio"
	"encoding/json"
	"errors"
	"fmt"
	"os"

	"github.com/go-resty/resty/v2"
)

func main() {
	if err := do(); err != nil {
		fmt.Fprintf(os.Stderr, "%v\n", err)
		os.Exit(1)
	}
}

func do() error {
	if len(os.Args) != 2 {
		return errors.New("please specify exactly one file listing RPM packages")
	}
	packages, err := readFile(os.Args[1])
	if err != nil {
		return err
	}
	for _, p := range packages {
		if err := processPackage(p); err != nil {
			return fmt.Errorf("processing CVE data: %w", err)
		}
	}
	return nil
}

func readFile(path string) ([]string, error) {
	f, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	scanner := bufio.NewScanner(f)
	scanner.Split(bufio.ScanLines)
	var packages []string
	for scanner.Scan() {
		packages = append(packages, scanner.Text())
	}
	return packages, nil
}

// See https://osidb.prodsec.redhat.com/osidb/api/v1/schema/swagger-ui/
func processPackage(p string) error {
	client := resty.New()
	resp, err := client.NewRequest().
		SetHeader("Accept", "application/json").
		SetQueryParams(map[string]string{
			"affects__ps_component": p,
			"include_fields":        "cve_id", // to speed up the query
			"created_dt__date__gte": "2022-09-17",
		}).
		Get("https://osidb.prodsec.redhat.com/osidb/api/v1/flaws")
	if err != nil {
		return fmt.Errorf("getting CVE data for %q: %w", p, err)
	}

	type Flaw struct {
		Count int `json:"count"`
	}

	var flaw Flaw
	if err := json.Unmarshal(resp.Body(), &flaw); err != nil {
		return fmt.Errorf("unmarshaling response for %q: %w", p, err)
	}
	fmt.Printf("%s,%d\n", p, flaw.Count)
	return nil
}
