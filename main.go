package main

import (
	"bufio"
	"encoding/json"
	"errors"
	"flag"
	"fmt"
	"os"

	"github.com/go-resty/resty/v2"
)

var (
	createdAfter string
	packageFile  string
	impact       string
)

func init() {
	flag.StringVar(&createdAfter, "after", "", "Count CVEs after the specified date (YYYY-MM-DD)")
	flag.StringVar(&packageFile, "file", "", "Read packages from the specified file (one per line)")
	flag.StringVar(&impact, "impact", "", "Impact of CVEs (CRITICAL, IMPORTANT, LOW, MODERATE)")
	flag.Parse()
}

func main() {
	if err := do(); err != nil {
		fmt.Fprintf(os.Stderr, "%v\n", err)
		os.Exit(1)
	}
}

func do() error {
	if packageFile == "" {
		return errors.New("please specify exactly one file listing RPM packages via --file")
	}
	packages, err := readFile(packageFile)
	if err != nil {
		return err
	}
	for _, p := range packages {
		if err := processPackage(p); err != nil {
			return fmt.Errorf("processing CVE data: %w", err)
		}
	}
	return nil
}

func readFile(path string) ([]string, error) {
	f, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	scanner := bufio.NewScanner(f)
	scanner.Split(bufio.ScanLines)
	var packages []string
	for scanner.Scan() {
		packages = append(packages, scanner.Text())
	}
	return packages, nil
}

// See https://osidb.prodsec.redhat.com/osidb/api/v1/schema/swagger-ui/
func processPackage(p string) error {
	params := map[string]string{
		"affects__ps_component": p,
		"include_fields":        "cve_id", // to speed up the query
	}
	if createdAfter != "" {
		params["created_dt__date__gte"] = createdAfter
	}
	if impact != "" {
		switch impact {
		case "CRITICAL", "IMPORTANT", "LOW", "MODERATE":
		default:
			return fmt.Errorf("unsupported impact value %q", impact)
		}
		params["impact"] = impact
	}
	client := resty.New()
	resp, err := client.NewRequest().
		SetHeader("Accept", "application/json").
		SetQueryParams(params).
		Get("https://osidb.prodsec.redhat.com/osidb/api/v1/flaws")
	if err != nil {
		return fmt.Errorf("getting CVE data for %q: %w", p, err)
	}

	type Flaw struct {
		Count int `json:"count"`
	}

	var flaw Flaw
	if err := json.Unmarshal(resp.Body(), &flaw); err != nil {
		return fmt.Errorf("unmarshaling response for %q: %w", p, err)
	}
	fmt.Printf("%s,%d\n", p, flaw.Count)
	return nil
}
